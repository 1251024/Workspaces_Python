# -*- coding:utf-8 -*-

# 스타벅스 지역검색 시도리스트 검색
#    __ajaxCall("/store/getGugunList.do", {"sido_cd":sido}, true, "json", "post",
#    if ( sido == "17") //세종시는 구군이 없어 바로 검색한다.
#    __ajaxCall("/store/getSidoList.do", {}, true, "json", "post",
# https://www.starbucks.co.kr/

# requests : 내장모델보다 사용하기 쉬워서 사용 

import requests
import json


# 시도 리스트
def getSiDo():
    url = 'https://www.starbucks.co.kr/store/getSidoList.do'
    resp = requests.post(url)
    #print(resp)
    #print(resp.text) #json으로 응답되는거 확인 가능 // .text: string / .json(): json객체로 응답됨
    #print(resp.json()['list'][0])#list 확인할 수 있는데, 'sido_cd': '01', 'sido_nm': '서울' 가져올 예정
    sido_json = resp.json()['list']
    
    # 
    sido_code = list(map(lambda x: x['sido_cd'], sido_json)) # map 함수는 sido_json 컬렉션 list에 적용시켜서 결과를 리턴하고 그 결과값이 map객체라서 map객체를 list로 뽑아냄
    # print(sido_code)
    sido_name = list(map(lambda x: x['sido_nm'], sido_json))
    # print(sido_name)
    
    # 딕셔너리로 바꾸기
    sido_dict = dict(zip(sido_code, sido_name)) #dict : 딕셔너리 생성자 / k:v형태로 만들기 (딕셔너리 타입은 immutable한 키(key)와 mutable한 값(value)으로 맵핑되어 있는 순서가 없는 집합입니다.)
    print(zip(sido_code, sido_name)) #zip : 리스트 두개를 하나로 묶어줌 = code와 name을 하나씩 묶어줌 (순서대로)
    print(sido_dict)
    
# 구군 리스트
def getGuGun(sido_code):
    url = 'https://www.starbucks.co.kr/store/getGugunList.do'
    resp = requests.post(url, data={'sido_cd': sido_code})
    print(resp.json())
    
if __name__ == '__main__':
    #getSiDo()
    print(getSiDo())
    sido = input('시도 코드를 입력해 주세요 : ')
    if sido == '17':    # 세종시는 구군이 없어 바로 검색 된다.
        pass
    else:
        getGuGun(sido)
    
    